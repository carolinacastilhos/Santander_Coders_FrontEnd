* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    font-size: 62,5%;
}
  
.background-img {
    background-image: url(https://images.unsplash.com/photo-1684266897797-d6e54c28aaf3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=928&q=80);
    background-size: cover;
    width: 100%;
    height: 500px;
    background-position: center;
}

h1 {
    color: #264155;
    font-size: 5.0rem; 
    font-weight: 300; 
    font-style: oblique;
    text-decoration: underline;
    text-align: center;
    /* display: none; */
    /* visibility: hidden; */
    /* com o display: none; o elemento não aparece em tela e nem ocupa aquele local. 
    No visibility: hidden; ele some da tela mas o espaço dele que antes era ocupado, segue na tela. */
    opacity: .4;
    /* opacity varia de 1 a 0. O 1 indica que o elemento está normal, sem nada de opacidade, e até o 0 ele vai diminuindo a opacidade até ficar invisível com o 0.*/
    /* no opacity, os eventos de clique e estilizações de mouse seguem ativos, mesmo que não de para ver o elemento, 
    enquanto no visibility hidden não aparece mais nada, fica somente o espaço que antes ocupava e desabilita o evento de clique no local.*/
}
  
h2 {
    font-size: 2.6rem;
}

table, td, th {
    border: 1px solid black;
    border-collapse: separate;
    font-size: 1.6rem; 
}
  
table th {
    background-color: #264155;
    color: white;
}
  
table tr:nth-child(2n + 1) { 
    background-color: rgb(154, 154, 154);
}

[data-company="CCL"] {
    /* para estilizar o atributo que criamos, escrevemos ele entre []*/
    /* podemos utilizar somente o data-company, que irá estilizar todos os que possuem esse atributo. Porém os que já estão de cinza terão conflito de estilização neste caso,
    pois já estao com cor de background*/
    background-color: rgb(184, 151, 43);
}

@media screen and (min-width: 1000px) {
    /* media query -> a media query consiste de um media type e pelo menos uma expressão que limita o escopo das folhas de estilo usando media features, tal como largura, altura e cor.
    utilizando o screen, irá atuar na tela */
    /* tomamos ações diferentes para mídias diferentes */
    .background-image {
        height: 50hv;
    }
    /* aqui estamos indicando que quando estiver na largura de 1000px para cima, a imagem da classe ficará nesta altura definida*/
}

@media screen and (min-width: 768px) and (max-width: 999px) {
    .background-image {
        height: 80vh;
    }
    /* pensando em uma tela de tablet agora */
}

@media screen and (max-width: 767px) {
    .background-image {
        height: 80vh;
    }
    /* pensando em uma tela de celular */
    table {
        display: none;
    }

    h1 {
        color: blueviolet;
    }
}

/* podemos ver o tamanho da tela para definir os media screen no devtools:
mobile pequeno é 320px
mobile medio 375px
mobile maior 425px
tablet 768px
laptop 1024px */

@media print {
    .background-image {
        display: none;
    }
    /* utilizando print, irá atuar quando for imprimir. Neste caso, estamos definindo que quando forem imprimir não aparecerá a imagem */
    /* não ocupará nem espaço na página de impressão */
}

#main-button {
    background-color: steelblue;
    color: white;
    border: none;
    font-size: 2.8rem;
    padding: 0.6rem 2.4rem;
    width: 80%;
    display: block;
    text-align: center;
    margin: auto;
    margin-top: 2rem;
    cursor: pointer;
    /* o atributo cursor é para modificar o ponteiro do mouse. Neste caso, do pointer, ele vira uma mãozinha indicando que pode-se clicar */
    transition: all .2s ease-in-out, background-color 1s ease-in-out;    
    /* com o transition, definimos como será a trnasição do elemento para o seu hover*/
    /* colocando após a vírgula o background-color, definimos exatamente o tempo que levará para fazer a transição somente da cor de fundo do elemento */
}

#main-button:hover {
    background-color: black;
    color: white;
    transform: scale(.5) rotate(2deg);
    /* com o transform conseguimos modificar diversas coisas no nosso elemento, como no exemplo acima a escala e rotacionar em graus */
}

#second-button {
    display: block;
    margin: auto;
    margin-top: 2rem;
    text-align: center;
    transform: scale(1);
    background-color: steelblue;
    color: white;
    border: none;
    font-size: 2.8rem;
    cursor: pointer;
    padding: 1rem 2.4rem;
    width: 50%;
    animation: pulse 2s infinite;
    /* defino alguns valores em animation e no @keyframes */
    /* onde está infinite poderia ser 3, por exemplo, então quando carregassemos a página, faria 3 vezes a animação e pararia */
}

@keyframes pulse {
    0% {
        transform: scale(1);
        opacity: 1;
    }

    50% {
        transform: scale(1.35);
        opacity: .6;
    }

    100% {
        transform: scale(1);
        opacity: 1;
    }
}

/* performance das animações: 
animar o elemento pelo transform e opacity não trazem perda de performance
mas se animar margin, width, etc, traria perda de perfomance */
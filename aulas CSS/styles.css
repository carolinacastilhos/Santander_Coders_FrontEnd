* {
  /* Para fugir das estilizações nativas do CSS */
  margin: 0;
  padding: 0;
  box-sizing: border-box; 
  /* box-sizing: border-box; preserva as dimensões dos elementos após padding */
}

:root {
  font-size: 62,5%; /*equivale a 10px*/
}

nav.menu {
  position: fixed;
  /* position fixed faz com que o elemento fique fixado no topo da página enquanto estamos escrolando */
  background-color: #264155;
  width: 100%;
  height: 7rem;
  /* para a imagem do cabeçalho não ficar cortada pela barra de navegação, colocamos o conteúdo main, que inclui ela, com padding-top da mesma altura.  */
  z-index: 1;
  /* z-index: 1; indica que este elemento tem uma prioridade em relação a outros elementos com position relative. Se não tivesse esse z-index na nav, os elementos da classe box ficariam por cima dela quando escrolassemos até embabixo  */
}

nav a {
  color: white;
}

main {
  padding-top: 7rem;
}

.background-img {
  background-image: url(https://images.unsplash.com/photo-1684266897797-d6e54c28aaf3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=928&q=80);
  background-size: cover;
  width: 100%;
  height: 500px;
  background-position: center;
}

h1 {
  color: #264155;
  font-size: 5.0rem; /*equivalente a 50px -> pois leva em consideração o font-size definido em % no root*/
  font-weight: 300; /*de 100 a 900*/
  font-style: oblique;
  text-decoration: underline;
  text-align: center;
}

h2 {
  font-size: 1.6rem;
  font-family: 'Roboto', sans-serif;
}

p {
  text-align: justify;
  text-indent: 90px;
}

table, td, th {
  border: 1px solid black;
  /* border-collapse: collapse; a borda fica simples*/
  border-collapse: separate; /* apresenta uma borda dupla  */
}

table th {
  background-color: #264155;
  color: white;
}

table tr:nth-child(2n + 1) { 
  /* o n indica qualquer elemento e ele inicia do zero, então colocando 2n significa que irá começar na terceira linha. Neste caso, não pegou a primeira linha, iniciou na 3 linha e vai a cada 1 linha intercalando */
 /*  para a primeira linha da tabela (sem contar o cabeçalho) inicie branca, seria 2n + 3 */
  background-color: rgb(154, 154, 154);
}

ul, ol {
  padding-left: 3.2rem; 
  /* se não tiver padding-left não irá aparecer os marcadores ao lado dos itens da lista */
  /* list-style: none; com isto, as listas ficam sem estilos - sem bolinhas ou números */
}

ul {
  list-style: circle;
  /* estilo de indicador ao lado do item */
}

ol {
  list-style: decimal-leading-zero;
  /* para colocar um zero antes do número que indica cada item na lista */
}

.boxes {
  position: relative;
}

.box {
  height: 10rem;
  width: 20rem;
  border: 4px solid #555;
  border-radius: 4rem;
  /* para arredondar os cantos da borda */
  display: inline-block;
  /* por padrão, a div tem display: block, ou seja, ela pula a linha, pq faz um bloco, e não permite que outro elemento fique ao lado dela (na mesma linha). Para que isto ocorra, precisamos colocar o inline-block */
  background-color: cadetblue;
  color: white;
  padding: 1.5rem;
  /* padding atua dentro do elemento */
  margin: 1.5rem;
  /* margin atua fora do elemento */
  position: static;
  /* position padrão é o static. Esta position não permite que tenha os parâmetros top left, entre outras, setadas */
}

.box:nth-child(1) {
  /* elemento 1 é a caixa 1 */
  position: absolute;
  /* com a posição absolute, o elemento não vai ocupar espaço em tela, ou seja, ele sai do fluxo normal dos outros elementos */
  /* se este elemento tem position absolute e os outros elementos pai dele não tem declarada uma position, ele respeitará o tamanho da página para se posicionar */
  /* agora se o elemento pai, que neste exemplo é a div boxes, tiver a position relative declarada, o absolute será contado a partir do elemento pai e não da página inteira */
  top: 30px;
  left: 100px;
}

.box:nth-child(2) {
  /* elemento 2 é a caixa 2 */
  position: fixed;
  /* position fixed faz com que o elemento fique fixo neste mesmo local mesmo escrolando a página */
  top: 15px;
  left: 30px;
  padding-top: 5rem;
}

img {
  height: 10rem;
  /* já a imagem por padrão tem display: inline */
  /* elementos inline não se comportam bem com dimensões bem definidas, como o height e width. O inline-block se comporta melhor*/
}

.contact-list h2 {
  top: 7rem;
  position: sticky;
  /* position sticky faz com que o elemento fique preso no topo da página (mas com o recuo do top que colocarmos), a partir de quando passamos por ela quando escrolamos */
  background-color: #264155;
  color: white;
}

.box-2 {
  height: 10rem;
  width: 20rem;
  border: 4px solid #555;
  border-radius: 4rem;
  display: inline-block;
  background-color: cadetblue;
  color: white;
  padding: 1.5rem;
  margin: 1.5rem;
  position: static;
}

.box-2:nth-child(2) {
  float: right;
  /* o float faz com que o elemento saia do fluxo normal dos demais elementos, e se posicione no local que definirmos, que neste caso foi o rigth. */
 /* não é uma prática tão interessante, pois pode modificar os elementos que vem após ele, tirar do eixo. Atualmente usamos o flex box*/
}

.boxes-3 {
  display: flex;
  /* display flex faz parte do flexbox.  */
  flex-wrap: wrap;
}

.box-3 {
  flex: 30%;
  height: 10rem;
  width: 20rem;
  border: 4px solid #555;
  border-radius: 4rem;
  display: inline-block;
  background-color: cadetblue;
  color: white;
  padding: 1.5rem;
  margin: 1.5rem;
}